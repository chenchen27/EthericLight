第三章 语法基础
  1. ECMAScript 中一切都区分大小写;
  2. 所谓标识符，就是变量、函数、属性或函数参数的名称，
      第一个字符必须是一个字母、下划线（_）或美元符号（$）;
      剩下的其他字符可以是字母、下划线、美元符号或数字;
  3. 按照惯例，ECMAScript 标识符使用驼峰大小写形式;
  4. ECMAScript 中的语句以分号结尾。(避免输入内容不完整、压缩代码、提升性能)
  5. ECMAScript 变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一
     个用于保存任意值的命名占位符;
  6. 不初始化的情况下，变量会保存一个特殊值 undefined;
  7. var 声明作用域
      使用 var 操作符定义的变量会成为包含它的函数的局部变量;
      在函数内定义变量时省略 var 操作符，可以创建一个全局变量;
  8. let 和 var 的区别
      let 声明的范围是块作用域，而 var 声明的范围是函数作用域;
      let 声明的变量不会在作用域中被提升(暂时性死区);
      var 声明变量时,会在作用域顶部合并为一个声明,let不能定义相同名称变量;
      for 循环var定义的迭代变量会渗透到循环体外部;
      for 循环中异步迭代var变量,会打印出for循环结束后的值;
  9. const和var的区别
      const 的行为与 let 基本相同;
      const 声明变量时必须同时初始化变量;
      const 声明的原始值不能改变;
 10. 代码风格: const 优先,let 次之;
 11. js现在有7种原始类型 u、n、b、s、n、s、b;
 12. 对 未声明的变量，只能执行一个有用的操作，就是对它调用 typeof
 13. 逻辑与操作符是一种短路操作符，如果第一个操作数决定了结果，那么永远不会对第二个
     操作数求值;
 14. 任何关系操作符在涉及比较 NaN 时都返回 false;
 15. 在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值;
 16. 在 for 循环的初始化代码中，其实是可以不使用变量声明关键字的使用 let 声明迭代器变量，
     这样就可以将这个变量的作用域限定在循环中;
 17. 不指定返回值的函数实际上会返回特殊值 undefined
